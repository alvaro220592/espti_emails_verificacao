Criação do projeto
    curl -s https://laravel.build/espti_emails_verificacao | bash

Configuração das portas, caso alguma já esteja sendo usada:
    entre no projeto, insira no .env, na parte do topo a porta 8080:
        APP_NAME=Laravel
        APP_ENV=local
        APP_KEY=blablablablablablablablablablablabla
        APP_DEBUG=true
        APP_URL=http://localhost
        APP_PORT=8080

    na parte mysql do .env, insira:
        FORWARD_DB_PORT=3307

Entrar no mailhog:
    localhost:8025

========

emails failover
    a configuração do failover fica em config/mail.php
    foi mudado no .env o MAIL_MAILER de smtp pra failover
    no failover ele tenta processar via smtp. se não der certo, vai por log

enviar emails
    no terminal: 
        ./vendor/bin/sail php artisan make:mail TesteMail
    É possível colocar no construtor no TesteMail o tipo de dado que terá que receber ao chamar a classe. ex:
        public function __construct(private array $user){}
    
    Na função build é possível colocar a view em que o email será renderizado, ex: return $this->view('emails.testeMail');

    em web.php foi feita uma rota com callback para chamar esse email

    foi criado um arquivo dentro de  lang/en/ chamado messages.php

renderizar emails
    para poder ver o email antes:
        return (new TesteMail)->render();

passar dados para a view do email  
    foi criado um usuário
        ./vendor/bin/sail php artisan migrate

anexar arquivos no email
    basta inserir "->attach(storage_path('app/public/teste.txt'));" na função build do email
    esse endereço de arquivo é pq eu fiz um .txt lá no storage/app/public

embed de imagem no email
    foi colocada uma imagem lá no mesmo endereço q o arquivo acima
    basta colocar na função build do email, dentro do envio de variáveis, o endereço da imagem:
    ->with([
            'image' => storage_path('app/public/4exzTLFFiHf2.gif')
        ])
    colocar na view do email um img chamando a variável:
    <img src="{{ $message->embed($image) }}" alt="">

    Para enviar uma imagem em base64 por exemplo, faz assim(nao funcionou):
    <img src="{{ $message->embedData($image, 'nomeDoArquivo.png') }}" alt="">

markdown
    para isso foi criada uma classe nova de email:
        ./vendor/bin/sail php artisan make:mail WelcomeMail --markdown=emails.users.welcome

        Aí já cria com a view junto
        Agora na classe de email, não se usa mais a propriedade 'view' e sim a 'markdown'
        Esse arquivo da view markdown gerado pode ser editado como o .md

        criei uma rota nova só pra ele pra nao confundir

personalização do markdown
    o markdon fica num apasta escondida. Aí é preciso "publicar" essa pasta pras views e poder mexer:
    ./vendor/bin/sail php artisan vendor:publish --tag=laravel-mail

    em config/mail.php é possível escolher o tema do email, então basta duplicar o resources/views/vendor/mail/html/themes/default.css e indicá-lo no mail.php com um novo nome

    trocar a cor do botao: 'color' => 'nomeCorDoCssPersonalizado'. 

emails com filas
    ir ao .env e alterar o queue_connection pra redis
    adicionar à classe de email: implements ShouldQueue
    ./vendor/bin/sail php artisan queue:work

    Qualquer alteração, reinicie o php artisan queue:work

autenticacao laravel 9
    ./vendor/bin/sail composer require laravel/breeze --dev
    php artisan breeze:install
    npm install
    npm run build

ATIVAR CONTA USUÁRIO NOVO NO LARAVEL
    antes de registrar usuário, entre na model User,
    descomente o use MustVerifyEmail e na declaração da classe, coloque o implements MustVerifyEmail
    colocar o 'verified' como mais um middleware da rota de /dashboard
    criar conta pra testar

    
